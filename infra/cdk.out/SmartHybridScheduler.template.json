{
 "Resources": {
  "AppTable815C50BC": {
   "Type": "AWS::DynamoDB::Table",
   "Properties": {
    "AttributeDefinitions": [
     {
      "AttributeName": "pk",
      "AttributeType": "S"
     },
     {
      "AttributeName": "sk",
      "AttributeType": "S"
     },
     {
      "AttributeName": "gsi1pk",
      "AttributeType": "S"
     },
     {
      "AttributeName": "gsi1sk",
      "AttributeType": "S"
     }
    ],
    "BillingMode": "PAY_PER_REQUEST",
    "GlobalSecondaryIndexes": [
     {
      "IndexName": "GSI1",
      "KeySchema": [
       {
        "AttributeName": "gsi1pk",
        "KeyType": "HASH"
       },
       {
        "AttributeName": "gsi1sk",
        "KeyType": "RANGE"
       }
      ],
      "Projection": {
       "ProjectionType": "ALL"
      }
     },
     {
      "IndexName": "gsi1",
      "KeySchema": [
       {
        "AttributeName": "gsi1pk",
        "KeyType": "HASH"
       },
       {
        "AttributeName": "gsi1sk",
        "KeyType": "RANGE"
       }
      ],
      "Projection": {
       "ProjectionType": "ALL"
      }
     }
    ],
    "KeySchema": [
     {
      "AttributeName": "pk",
      "KeyType": "HASH"
     },
     {
      "AttributeName": "sk",
      "KeyType": "RANGE"
     }
    ],
    "PointInTimeRecoverySpecification": {
     "PointInTimeRecoveryEnabled": true
    }
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "SmartHybridScheduler/AppTable/Resource"
   }
  },
  "SiteBucket397A1860": {
   "Type": "AWS::S3::Bucket",
   "Properties": {
    "PublicAccessBlockConfiguration": {
     "BlockPublicAcls": true,
     "BlockPublicPolicy": true,
     "IgnorePublicAcls": true,
     "RestrictPublicBuckets": true
    },
    "Tags": [
     {
      "Key": "aws-cdk:auto-delete-objects",
      "Value": "true"
     }
    ]
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "SmartHybridScheduler/SiteBucket/Resource"
   }
  },
  "SiteBucketPolicy3AC1D0F8": {
   "Type": "AWS::S3::BucketPolicy",
   "Properties": {
    "Bucket": {
     "Ref": "SiteBucket397A1860"
    },
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "s3:*",
       "Condition": {
        "Bool": {
         "aws:SecureTransport": "false"
        }
       },
       "Effect": "Deny",
       "Principal": {
        "AWS": "*"
       },
       "Resource": [
        {
         "Fn::GetAtt": [
          "SiteBucket397A1860",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "SiteBucket397A1860",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "s3:PutBucketPolicy",
        "s3:GetBucket*",
        "s3:List*",
        "s3:DeleteObject*"
       ],
       "Effect": "Allow",
       "Principal": {
        "AWS": {
         "Fn::GetAtt": [
          "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
          "Arn"
         ]
        }
       },
       "Resource": [
        {
         "Fn::GetAtt": [
          "SiteBucket397A1860",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "SiteBucket397A1860",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": "s3:GetObject",
       "Effect": "Allow",
       "Principal": {
        "CanonicalUser": {
         "Fn::GetAtt": [
          "SiteOAI1F7E9870",
          "S3CanonicalUserId"
         ]
        }
       },
       "Resource": {
        "Fn::Join": [
         "",
         [
          {
           "Fn::GetAtt": [
            "SiteBucket397A1860",
            "Arn"
           ]
          },
          "/*"
         ]
        ]
       },
       "Sid": "AllowCloudFrontOAIRead"
      },
      {
       "Action": "s3:GetObject",
       "Effect": "Allow",
       "Principal": {
        "CanonicalUser": {
         "Fn::GetAtt": [
          "SiteOAI1F7E9870",
          "S3CanonicalUserId"
         ]
        }
       },
       "Resource": {
        "Fn::Join": [
         "",
         [
          {
           "Fn::GetAtt": [
            "SiteBucket397A1860",
            "Arn"
           ]
          },
          "/*"
         ]
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "aws:cdk:path": "SmartHybridScheduler/SiteBucket/Policy/Resource"
   }
  },
  "SiteBucketAutoDeleteObjectsCustomResource9585E968": {
   "Type": "Custom::S3AutoDeleteObjects",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F",
      "Arn"
     ]
    },
    "BucketName": {
     "Ref": "SiteBucket397A1860"
    }
   },
   "DependsOn": [
    "SiteBucketPolicy3AC1D0F8"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "SmartHybridScheduler/SiteBucket/AutoDeleteObjectsCustomResource/Default"
   }
  },
  "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Version": "2012-10-17",
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ]
    },
    "ManagedPolicyArns": [
     {
      "Fn::Sub": "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "SmartHybridScheduler/Custom::S3AutoDeleteObjectsCustomResourceProvider/Role"
   }
  },
  "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": "cdk-hnb659fds-assets-536580887554-il-central-1",
     "S3Key": "faa95a81ae7d7373f3e1f242268f904eb748d8d0fdd306e8a6fe515a1905a7d6.zip"
    },
    "Timeout": 900,
    "MemorySize": 128,
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
      "Arn"
     ]
    },
    "Runtime": "nodejs20.x",
    "Description": {
     "Fn::Join": [
      "",
      [
       "Lambda function for auto-deleting objects in ",
       {
        "Ref": "SiteBucket397A1860"
       },
       " S3 bucket."
      ]
     ]
    }
   },
   "DependsOn": [
    "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092"
   ],
   "Metadata": {
    "aws:cdk:path": "SmartHybridScheduler/Custom::S3AutoDeleteObjectsCustomResourceProvider/Handler",
    "aws:asset:path": "asset.faa95a81ae7d7373f3e1f242268f904eb748d8d0fdd306e8a6fe515a1905a7d6",
    "aws:asset:property": "Code"
   }
  },
  "SiteOAI1F7E9870": {
   "Type": "AWS::CloudFront::CloudFrontOriginAccessIdentity",
   "Properties": {
    "CloudFrontOriginAccessIdentityConfig": {
     "Comment": "Allows CloudFront to reach the bucket"
    }
   },
   "Metadata": {
    "aws:cdk:path": "SmartHybridScheduler/SiteOAI/Resource"
   }
  },
  "SiteDistribution3FF9535D": {
   "Type": "AWS::CloudFront::Distribution",
   "Properties": {
    "DistributionConfig": {
     "CustomErrorResponses": [
      {
       "ErrorCachingMinTTL": 0,
       "ErrorCode": 403,
       "ResponseCode": 200,
       "ResponsePagePath": "/index.html"
      },
      {
       "ErrorCachingMinTTL": 0,
       "ErrorCode": 404,
       "ResponseCode": 200,
       "ResponsePagePath": "/index.html"
      }
     ],
     "DefaultCacheBehavior": {
      "CachePolicyId": "658327ea-f89d-4fab-a63d-7e88639e58f6",
      "Compress": true,
      "TargetOriginId": "SmartHybridSchedulerSiteDistributionOrigin16E8B1E9D",
      "ViewerProtocolPolicy": "redirect-to-https"
     },
     "DefaultRootObject": "index.html",
     "Enabled": true,
     "HttpVersion": "http2",
     "IPV6Enabled": true,
     "Origins": [
      {
       "DomainName": {
        "Fn::GetAtt": [
         "SiteBucket397A1860",
         "RegionalDomainName"
        ]
       },
       "Id": "SmartHybridSchedulerSiteDistributionOrigin16E8B1E9D",
       "S3OriginConfig": {
        "OriginAccessIdentity": {
         "Fn::Join": [
          "",
          [
           "origin-access-identity/cloudfront/",
           {
            "Ref": "SiteOAI1F7E9870"
           }
          ]
         ]
        }
       }
      }
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "SmartHybridScheduler/SiteDistribution/Resource"
   }
  },
  "UserPool6BA7E5F2": {
   "Type": "AWS::Cognito::UserPool",
   "Properties": {
    "AccountRecoverySetting": {
     "RecoveryMechanisms": [
      {
       "Name": "verified_email",
       "Priority": 1
      }
     ]
    },
    "AdminCreateUserConfig": {
     "AllowAdminCreateUserOnly": false
    },
    "AutoVerifiedAttributes": [
     "email"
    ],
    "EmailVerificationMessage": "The verification code to your new account is {####}",
    "EmailVerificationSubject": "Verify your new account",
    "Policies": {
     "PasswordPolicy": {
      "MinimumLength": 8
     }
    },
    "SmsVerificationMessage": "The verification code to your new account is {####}",
    "UsernameAttributes": [
     "email"
    ],
    "VerificationMessageTemplate": {
     "DefaultEmailOption": "CONFIRM_WITH_CODE",
     "EmailMessage": "The verification code to your new account is {####}",
     "EmailSubject": "Verify your new account",
     "SmsMessage": "The verification code to your new account is {####}"
    }
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "SmartHybridScheduler/UserPool/Resource"
   }
  },
  "UserPoolCognitoDomainD6C7F9FA": {
   "Type": "AWS::Cognito::UserPoolDomain",
   "Properties": {
    "Domain": "yonibl-scheduler-app",
    "UserPoolId": {
     "Ref": "UserPool6BA7E5F2"
    }
   },
   "Metadata": {
    "aws:cdk:path": "SmartHybridScheduler/UserPool/CognitoDomain/Resource"
   }
  },
  "UserPoolClient2F5918F7": {
   "Type": "AWS::Cognito::UserPoolClient",
   "Properties": {
    "AllowedOAuthFlows": [
     "implicit",
     "code"
    ],
    "AllowedOAuthFlowsUserPoolClient": true,
    "AllowedOAuthScopes": [
     "openid",
     "email",
     "profile"
    ],
    "CallbackURLs": [
     "http://localhost:5173",
     {
      "Fn::Join": [
       "",
       [
        "https://",
        {
         "Fn::GetAtt": [
          "SiteDistribution3FF9535D",
          "DomainName"
         ]
        }
       ]
      ]
     }
    ],
    "ExplicitAuthFlows": [
     "ALLOW_USER_PASSWORD_AUTH",
     "ALLOW_CUSTOM_AUTH",
     "ALLOW_USER_SRP_AUTH",
     "ALLOW_REFRESH_TOKEN_AUTH"
    ],
    "GenerateSecret": false,
    "LogoutURLs": [
     "http://localhost:5173",
     {
      "Fn::Join": [
       "",
       [
        "https://",
        {
         "Fn::GetAtt": [
          "SiteDistribution3FF9535D",
          "DomainName"
         ]
        }
       ]
      ]
     }
    ],
    "PreventUserExistenceErrors": "ENABLED",
    "SupportedIdentityProviders": [
     "COGNITO"
    ],
    "UserPoolId": {
     "Ref": "UserPool6BA7E5F2"
    }
   },
   "Metadata": {
    "aws:cdk:path": "SmartHybridScheduler/UserPoolClient/Resource"
   }
  },
  "ApiLambdaServiceRole1CC7D0F3": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "SmartHybridScheduler/ApiLambda/ServiceRole/Resource"
   }
  },
  "ApiLambdaServiceRoleDefaultPolicyF1B57697": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "dynamodb:BatchGetItem",
        "dynamodb:GetRecords",
        "dynamodb:GetShardIterator",
        "dynamodb:Query",
        "dynamodb:GetItem",
        "dynamodb:Scan",
        "dynamodb:ConditionCheckItem",
        "dynamodb:BatchWriteItem",
        "dynamodb:PutItem",
        "dynamodb:UpdateItem",
        "dynamodb:DeleteItem",
        "dynamodb:DescribeTable"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "AppTable815C50BC",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "AppTable815C50BC",
             "Arn"
            ]
           },
           "/index/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "ApiLambdaServiceRoleDefaultPolicyF1B57697",
    "Roles": [
     {
      "Ref": "ApiLambdaServiceRole1CC7D0F3"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "SmartHybridScheduler/ApiLambda/ServiceRole/DefaultPolicy/Resource"
   }
  },
  "ApiLambda91D2282D": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": "cdk-hnb659fds-assets-536580887554-il-central-1",
     "S3Key": "fc94cebd00c5857f85e174a19cf4905ef1a79bba7645e732efcef71b99eaedd3.zip"
    },
    "Environment": {
     "Variables": {
      "TABLE_NAME": {
       "Ref": "AppTable815C50BC"
      },
      "ALLOW_DEV_AUTH": "false",
      "USER_POOL_ID": {
       "Ref": "UserPool6BA7E5F2"
      },
      "USER_POOL_CLIENT_ID": {
       "Ref": "UserPoolClient2F5918F7"
      }
     }
    },
    "Handler": "app.handler",
    "MemorySize": 256,
    "Role": {
     "Fn::GetAtt": [
      "ApiLambdaServiceRole1CC7D0F3",
      "Arn"
     ]
    },
    "Runtime": "python3.12",
    "Timeout": 10
   },
   "DependsOn": [
    "ApiLambdaServiceRoleDefaultPolicyF1B57697",
    "ApiLambdaServiceRole1CC7D0F3"
   ],
   "Metadata": {
    "aws:cdk:path": "SmartHybridScheduler/ApiLambda/Resource",
    "aws:asset:path": "asset.fc94cebd00c5857f85e174a19cf4905ef1a79bba7645e732efcef71b99eaedd3",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Code"
   }
  },
  "ApiUserAuthorizerC8FE937D": {
   "Type": "AWS::ApiGateway::Authorizer",
   "Properties": {
    "IdentitySource": "method.request.header.Authorization",
    "Name": "SmartHybridSchedulerApiUserAuthorizerD9E8E447",
    "ProviderARNs": [
     {
      "Fn::GetAtt": [
       "UserPool6BA7E5F2",
       "Arn"
      ]
     }
    ],
    "RestApiId": {
     "Ref": "ApiF70053CD"
    },
    "Type": "COGNITO_USER_POOLS"
   },
   "Metadata": {
    "aws:cdk:path": "SmartHybridScheduler/ApiUserAuthorizer/Resource"
   }
  },
  "ApiF70053CD": {
   "Type": "AWS::ApiGateway::RestApi",
   "Properties": {
    "Name": "Api"
   },
   "Metadata": {
    "aws:cdk:path": "SmartHybridScheduler/Api/Resource"
   }
  },
  "ApiCloudWatchRole73EC6FC4": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "apigateway.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"
       ]
      ]
     }
    ]
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain",
   "Metadata": {
    "aws:cdk:path": "SmartHybridScheduler/Api/CloudWatchRole/Resource"
   }
  },
  "ApiAccountA18C9B29": {
   "Type": "AWS::ApiGateway::Account",
   "Properties": {
    "CloudWatchRoleArn": {
     "Fn::GetAtt": [
      "ApiCloudWatchRole73EC6FC4",
      "Arn"
     ]
    }
   },
   "DependsOn": [
    "ApiF70053CD"
   ],
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain",
   "Metadata": {
    "aws:cdk:path": "SmartHybridScheduler/Api/Account"
   }
  },
  "ApiDeploymentB17BE62D4c75cc67fb5afa38ee7874017c1bdbc5": {
   "Type": "AWS::ApiGateway::Deployment",
   "Properties": {
    "Description": "Automatically created by the RestApi construct",
    "RestApiId": {
     "Ref": "ApiF70053CD"
    }
   },
   "DependsOn": [
    "ApiproxyANY4946669B",
    "ApiproxyOPTIONS230BB97B",
    "Apiproxy05443892",
    "ApiANY40671C4F",
    "ApihealthGET8A9DC1E4",
    "ApihealthOPTIONS119B6E46",
    "Apihealth5CB7A415",
    "ApiOPTIONS5886EA5D"
   ],
   "Metadata": {
    "aws:cdk:path": "SmartHybridScheduler/Api/Deployment/Resource"
   }
  },
  "ApiDeploymentStageprod3EB9684E": {
   "Type": "AWS::ApiGateway::Stage",
   "Properties": {
    "DeploymentId": {
     "Ref": "ApiDeploymentB17BE62D4c75cc67fb5afa38ee7874017c1bdbc5"
    },
    "MethodSettings": [
     {
      "DataTraceEnabled": false,
      "HttpMethod": "*",
      "ResourcePath": "/*",
      "ThrottlingBurstLimit": 100,
      "ThrottlingRateLimit": 50
     }
    ],
    "RestApiId": {
     "Ref": "ApiF70053CD"
    },
    "StageName": "prod"
   },
   "DependsOn": [
    "ApiAccountA18C9B29"
   ],
   "Metadata": {
    "aws:cdk:path": "SmartHybridScheduler/Api/DeploymentStage.prod/Resource"
   }
  },
  "ApiOPTIONS5886EA5D": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "ApiKeyRequired": false,
    "AuthorizationType": "NONE",
    "HttpMethod": "OPTIONS",
    "Integration": {
     "IntegrationResponses": [
      {
       "ResponseParameters": {
        "method.response.header.Access-Control-Allow-Headers": "'Authorization,Content-Type,X-Request-Id'",
        "method.response.header.Access-Control-Allow-Origin": "'http://localhost:5173'",
        "method.response.header.Vary": "'Origin'",
        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
       },
       "ResponseTemplates": {
        "application/json": {
         "Fn::Join": [
          "",
          [
           "#set($origin = $input.params().header.get(\"Origin\"))\n#if($origin == \"\")\n  #set($origin = $input.params().header.get(\"origin\"))\n#end\n#if($origin == \"https://",
           {
            "Fn::GetAtt": [
             "SiteDistribution3FF9535D",
             "DomainName"
            ]
           },
           "\")\n  #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin)\n#end"
          ]
         ]
        }
       },
       "StatusCode": "204"
      }
     ],
     "RequestTemplates": {
      "application/json": "{ statusCode: 200 }"
     },
     "Type": "MOCK"
    },
    "MethodResponses": [
     {
      "ResponseParameters": {
       "method.response.header.Access-Control-Allow-Headers": true,
       "method.response.header.Access-Control-Allow-Origin": true,
       "method.response.header.Vary": true,
       "method.response.header.Access-Control-Allow-Methods": true
      },
      "StatusCode": "204"
     }
    ],
    "ResourceId": {
     "Fn::GetAtt": [
      "ApiF70053CD",
      "RootResourceId"
     ]
    },
    "RestApiId": {
     "Ref": "ApiF70053CD"
    }
   },
   "Metadata": {
    "aws:cdk:path": "SmartHybridScheduler/Api/Default/OPTIONS/Resource"
   }
  },
  "Apiproxy05443892": {
   "Type": "AWS::ApiGateway::Resource",
   "Properties": {
    "ParentId": {
     "Fn::GetAtt": [
      "ApiF70053CD",
      "RootResourceId"
     ]
    },
    "PathPart": "{proxy+}",
    "RestApiId": {
     "Ref": "ApiF70053CD"
    }
   },
   "Metadata": {
    "aws:cdk:path": "SmartHybridScheduler/Api/Default/{proxy+}/Resource"
   }
  },
  "ApiproxyOPTIONS230BB97B": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "ApiKeyRequired": false,
    "AuthorizationType": "NONE",
    "HttpMethod": "OPTIONS",
    "Integration": {
     "IntegrationResponses": [
      {
       "ResponseParameters": {
        "method.response.header.Access-Control-Allow-Headers": "'Authorization,Content-Type,X-Request-Id'",
        "method.response.header.Access-Control-Allow-Origin": "'http://localhost:5173'",
        "method.response.header.Vary": "'Origin'",
        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
       },
       "ResponseTemplates": {
        "application/json": {
         "Fn::Join": [
          "",
          [
           "#set($origin = $input.params().header.get(\"Origin\"))\n#if($origin == \"\")\n  #set($origin = $input.params().header.get(\"origin\"))\n#end\n#if($origin == \"https://",
           {
            "Fn::GetAtt": [
             "SiteDistribution3FF9535D",
             "DomainName"
            ]
           },
           "\")\n  #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin)\n#end"
          ]
         ]
        }
       },
       "StatusCode": "204"
      }
     ],
     "RequestTemplates": {
      "application/json": "{ statusCode: 200 }"
     },
     "Type": "MOCK"
    },
    "MethodResponses": [
     {
      "ResponseParameters": {
       "method.response.header.Access-Control-Allow-Headers": true,
       "method.response.header.Access-Control-Allow-Origin": true,
       "method.response.header.Vary": true,
       "method.response.header.Access-Control-Allow-Methods": true
      },
      "StatusCode": "204"
     }
    ],
    "ResourceId": {
     "Ref": "Apiproxy05443892"
    },
    "RestApiId": {
     "Ref": "ApiF70053CD"
    }
   },
   "Metadata": {
    "aws:cdk:path": "SmartHybridScheduler/Api/Default/{proxy+}/OPTIONS/Resource"
   }
  },
  "ApiproxyANYApiPermissionSmartHybridSchedulerApi750DD481ANYproxyE5B5396E": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "ApiLambda91D2282D",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":execute-api:il-central-1:536580887554:",
       {
        "Ref": "ApiF70053CD"
       },
       "/",
       {
        "Ref": "ApiDeploymentStageprod3EB9684E"
       },
       "/*/*"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "SmartHybridScheduler/Api/Default/{proxy+}/ANY/ApiPermission.SmartHybridSchedulerApi750DD481.ANY..{proxy+}"
   }
  },
  "ApiproxyANYApiPermissionTestSmartHybridSchedulerApi750DD481ANYproxy80AE5500": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "ApiLambda91D2282D",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":execute-api:il-central-1:536580887554:",
       {
        "Ref": "ApiF70053CD"
       },
       "/test-invoke-stage/*/*"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "SmartHybridScheduler/Api/Default/{proxy+}/ANY/ApiPermission.Test.SmartHybridSchedulerApi750DD481.ANY..{proxy+}"
   }
  },
  "ApiproxyANY4946669B": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "AuthorizationType": "COGNITO_USER_POOLS",
    "AuthorizerId": {
     "Ref": "ApiUserAuthorizerC8FE937D"
    },
    "HttpMethod": "ANY",
    "Integration": {
     "IntegrationHttpMethod": "POST",
     "Type": "AWS_PROXY",
     "Uri": {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":apigateway:il-central-1:lambda:path/2015-03-31/functions/",
        {
         "Fn::GetAtt": [
          "ApiLambda91D2282D",
          "Arn"
         ]
        },
        "/invocations"
       ]
      ]
     }
    },
    "ResourceId": {
     "Ref": "Apiproxy05443892"
    },
    "RestApiId": {
     "Ref": "ApiF70053CD"
    }
   },
   "Metadata": {
    "aws:cdk:path": "SmartHybridScheduler/Api/Default/{proxy+}/ANY/Resource"
   }
  },
  "ApiANYApiPermissionSmartHybridSchedulerApi750DD481ANY342FCC58": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "ApiLambda91D2282D",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":execute-api:il-central-1:536580887554:",
       {
        "Ref": "ApiF70053CD"
       },
       "/",
       {
        "Ref": "ApiDeploymentStageprod3EB9684E"
       },
       "/*/"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "SmartHybridScheduler/Api/Default/ANY/ApiPermission.SmartHybridSchedulerApi750DD481.ANY.."
   }
  },
  "ApiANYApiPermissionTestSmartHybridSchedulerApi750DD481ANY39A20EC4": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "ApiLambda91D2282D",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":execute-api:il-central-1:536580887554:",
       {
        "Ref": "ApiF70053CD"
       },
       "/test-invoke-stage/*/"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "SmartHybridScheduler/Api/Default/ANY/ApiPermission.Test.SmartHybridSchedulerApi750DD481.ANY.."
   }
  },
  "ApiANY40671C4F": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "AuthorizationType": "COGNITO_USER_POOLS",
    "AuthorizerId": {
     "Ref": "ApiUserAuthorizerC8FE937D"
    },
    "HttpMethod": "ANY",
    "Integration": {
     "IntegrationHttpMethod": "POST",
     "Type": "AWS_PROXY",
     "Uri": {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":apigateway:il-central-1:lambda:path/2015-03-31/functions/",
        {
         "Fn::GetAtt": [
          "ApiLambda91D2282D",
          "Arn"
         ]
        },
        "/invocations"
       ]
      ]
     }
    },
    "ResourceId": {
     "Fn::GetAtt": [
      "ApiF70053CD",
      "RootResourceId"
     ]
    },
    "RestApiId": {
     "Ref": "ApiF70053CD"
    }
   },
   "Metadata": {
    "aws:cdk:path": "SmartHybridScheduler/Api/Default/ANY/Resource"
   }
  },
  "Apihealth5CB7A415": {
   "Type": "AWS::ApiGateway::Resource",
   "Properties": {
    "ParentId": {
     "Fn::GetAtt": [
      "ApiF70053CD",
      "RootResourceId"
     ]
    },
    "PathPart": "health",
    "RestApiId": {
     "Ref": "ApiF70053CD"
    }
   },
   "Metadata": {
    "aws:cdk:path": "SmartHybridScheduler/Api/Default/health/Resource"
   }
  },
  "ApihealthOPTIONS119B6E46": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "ApiKeyRequired": false,
    "AuthorizationType": "NONE",
    "HttpMethod": "OPTIONS",
    "Integration": {
     "IntegrationResponses": [
      {
       "ResponseParameters": {
        "method.response.header.Access-Control-Allow-Headers": "'Authorization,Content-Type,X-Request-Id'",
        "method.response.header.Access-Control-Allow-Origin": "'http://localhost:5173'",
        "method.response.header.Vary": "'Origin'",
        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
       },
       "ResponseTemplates": {
        "application/json": {
         "Fn::Join": [
          "",
          [
           "#set($origin = $input.params().header.get(\"Origin\"))\n#if($origin == \"\")\n  #set($origin = $input.params().header.get(\"origin\"))\n#end\n#if($origin == \"https://",
           {
            "Fn::GetAtt": [
             "SiteDistribution3FF9535D",
             "DomainName"
            ]
           },
           "\")\n  #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin)\n#end"
          ]
         ]
        }
       },
       "StatusCode": "204"
      }
     ],
     "RequestTemplates": {
      "application/json": "{ statusCode: 200 }"
     },
     "Type": "MOCK"
    },
    "MethodResponses": [
     {
      "ResponseParameters": {
       "method.response.header.Access-Control-Allow-Headers": true,
       "method.response.header.Access-Control-Allow-Origin": true,
       "method.response.header.Vary": true,
       "method.response.header.Access-Control-Allow-Methods": true
      },
      "StatusCode": "204"
     }
    ],
    "ResourceId": {
     "Ref": "Apihealth5CB7A415"
    },
    "RestApiId": {
     "Ref": "ApiF70053CD"
    }
   },
   "Metadata": {
    "aws:cdk:path": "SmartHybridScheduler/Api/Default/health/OPTIONS/Resource"
   }
  },
  "ApihealthGETApiPermissionSmartHybridSchedulerApi750DD481GEThealth2CC92CAB": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "ApiLambda91D2282D",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":execute-api:il-central-1:536580887554:",
       {
        "Ref": "ApiF70053CD"
       },
       "/",
       {
        "Ref": "ApiDeploymentStageprod3EB9684E"
       },
       "/GET/health"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "SmartHybridScheduler/Api/Default/health/GET/ApiPermission.SmartHybridSchedulerApi750DD481.GET..health"
   }
  },
  "ApihealthGETApiPermissionTestSmartHybridSchedulerApi750DD481GEThealthD751C63B": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "ApiLambda91D2282D",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":execute-api:il-central-1:536580887554:",
       {
        "Ref": "ApiF70053CD"
       },
       "/test-invoke-stage/GET/health"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "SmartHybridScheduler/Api/Default/health/GET/ApiPermission.Test.SmartHybridSchedulerApi750DD481.GET..health"
   }
  },
  "ApihealthGET8A9DC1E4": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "AuthorizationType": "NONE",
    "HttpMethod": "GET",
    "Integration": {
     "IntegrationHttpMethod": "POST",
     "Type": "AWS_PROXY",
     "Uri": {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":apigateway:il-central-1:lambda:path/2015-03-31/functions/",
        {
         "Fn::GetAtt": [
          "ApiLambda91D2282D",
          "Arn"
         ]
        },
        "/invocations"
       ]
      ]
     }
    },
    "ResourceId": {
     "Ref": "Apihealth5CB7A415"
    },
    "RestApiId": {
     "Ref": "ApiF70053CD"
    }
   },
   "Metadata": {
    "aws:cdk:path": "SmartHybridScheduler/Api/Default/health/GET/Resource"
   }
  },
  "DailyRule7A0FEF67": {
   "Type": "AWS::Events::Rule",
   "Properties": {
    "ScheduleExpression": "rate(1 day)",
    "State": "ENABLED",
    "Targets": [
     {
      "Arn": {
       "Fn::GetAtt": [
        "ApiLambda91D2282D",
        "Arn"
       ]
      },
      "Id": "Target0"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "SmartHybridScheduler/DailyRule/Resource"
   }
  },
  "DailyRuleAllowEventRuleSmartHybridSchedulerApiLambdaDF6C459732E0912B": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "ApiLambda91D2282D",
      "Arn"
     ]
    },
    "Principal": "events.amazonaws.com",
    "SourceArn": {
     "Fn::GetAtt": [
      "DailyRule7A0FEF67",
      "Arn"
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "SmartHybridScheduler/DailyRule/AllowEventRuleSmartHybridSchedulerApiLambdaDF6C4597"
   }
  },
  "CDKMetadata": {
   "Type": "AWS::CDK::Metadata",
   "Properties": {
    "Analytics": "v2:deflate64:H4sIAAAAAAAA/21RwU7kMAz9Fu6ZsAPiwLHMCAlpEVVhzyhNTcc7bTyKHYZu1H9fpWl3uhInv2c/O8/Ojd7e3egfV+bMG9scNx3WOr6KsUdlzvwem8GZnppaxzdTd6B2H24Co+JbHR+CPYKk5IxyKKlDO1zSM8/kwTCMynYUmg9PTnR88diiK6wF5qcGnKBMzbukeUyabxV7ZPFYB0FySb7mo7LUOhTS8ReDL4m6JPmHF7Cn3qBbl+bMQncdgpO1IGdG1Zm+boyOj8HZxcIal+B7ZJ7MoOl1rCjfb4qXE2WU7vlumEFYFykoc8LWCJzNoOMuL7NY4CLIgTz+AZ8mrNjPyVQFLMUJp8cusLCWghO1h1NHQz+vtWKvYtrJYQYVMAVvIX2YegY5UJOKMyo9fQ2LZH4p4wWMCj7BCetYhXnz0ME4qktXYKH+2yH/l0pPn9iAn6xM50kW0bWp5yXIKcioykEO5K5v9Xar769+M+LGByfYg65y/AvEO21i7QIAAA=="
   },
   "Metadata": {
    "aws:cdk:path": "SmartHybridScheduler/CDKMetadata/Default"
   }
  }
 },
 "Outputs": {
  "ApiEndpoint4F160690": {
   "Value": {
    "Fn::Join": [
     "",
     [
      "https://",
      {
       "Ref": "ApiF70053CD"
      },
      ".execute-api.il-central-1.",
      {
       "Ref": "AWS::URLSuffix"
      },
      "/",
      {
       "Ref": "ApiDeploymentStageprod3EB9684E"
      },
      "/"
     ]
    ]
   }
  },
  "StackName": {
   "Value": "SmartHybridScheduler"
  },
  "TableName": {
   "Value": {
    "Ref": "AppTable815C50BC"
   }
  },
  "ApiUrl": {
   "Value": {
    "Fn::Join": [
     "",
     [
      "https://",
      {
       "Ref": "ApiF70053CD"
      },
      ".execute-api.il-central-1.",
      {
       "Ref": "AWS::URLSuffix"
      },
      "/",
      {
       "Ref": "ApiDeploymentStageprod3EB9684E"
      },
      "/"
     ]
    ]
   }
  },
  "BucketName": {
   "Value": {
    "Ref": "SiteBucket397A1860"
   }
  },
  "CloudFrontURL": {
   "Value": {
    "Fn::Join": [
     "",
     [
      "https://",
      {
       "Fn::GetAtt": [
        "SiteDistribution3FF9535D",
        "DomainName"
       ]
      }
     ]
    ]
   }
  },
  "UserPoolId": {
   "Value": {
    "Ref": "UserPool6BA7E5F2"
   }
  },
  "UserPoolClientId": {
   "Value": {
    "Ref": "UserPoolClient2F5918F7"
   }
  },
  "HostedUiBaseUrl": {
   "Value": {
    "Ref": "UserPoolCognitoDomainD6C7F9FA"
   }
  }
 },
 "Parameters": {
  "BootstrapVersion": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/cdk-bootstrap/hnb659fds/version",
   "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
  }
 },
 "Rules": {
  "CheckBootstrapVersion": {
   "Assertions": [
    {
     "Assert": {
      "Fn::Not": [
       {
        "Fn::Contains": [
         [
          "1",
          "2",
          "3",
          "4",
          "5"
         ],
         {
          "Ref": "BootstrapVersion"
         }
        ]
       }
      ]
     },
     "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
    }
   ]
  }
 }
}